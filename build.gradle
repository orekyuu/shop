plugins {
    id 'org.springframework.boot' version '2.4.0' apply false
    id "com.github.jlouns.cpe" version "0.5.0"
}

group 'net.orekyuu'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
}


subprojects {
    apply plugin: 'java'
    sourceCompatibility = 11

    def defaultEncoding = 'UTF-8'
    [AbstractCompile, Javadoc].each {
        tasks.withType(it).each { it.options.encoding = defaultEncoding }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testImplementation platform('org.junit:junit-bom:5.5.1')

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.platform:junit-platform-commons'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.assertj:assertj-core:3.13.2'
        testImplementation 'org.mockito:mockito-core:+'
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }
}

project("core") {
    apply plugin: 'java-library'
    dependencies {
        api project(":identity")
    }
}

project("web") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        implementation platform('org.springframework.boot:spring-boot-dependencies:2.1.7.RELEASE')
        implementation platform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR2')

        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'org.springframework.boot:spring-boot-starter-mail'
        implementation 'org.springframework.cloud:spring-cloud-starter-aws:+'
        implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.4.1'
        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'

        implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.1.1'
        implementation('org.seasar.doma:doma:2.24.0')
        annotationProcessor('org.seasar.doma:doma:2.24.0')
        runtimeOnly 'mysql:mysql-connector-java'
        implementation 'org.flywaydb:flyway-core'

        implementation 'io.lettuce:lettuce-core:5.1.8.RELEASE'

        implementation 'net.orekyuu:kt-mapper:0.0.2'

        implementation project(':core')

        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'junit'
        }
    }

    task buildWebUiResources(type: CrossPlatformExec) {
        workingDir '../web-ui'
        commandLine 'yarn', 'run', 'build'
    }

    task copyWebUiResources(type: Copy, dependsOn: ':web:buildWebUiResources') {
        from '../web-ui/build'
        into "${sourceSets.main.output.resourcesDir}/static/assets"
    }

    processResources {
        // web-uiで作った成果物をコピーしてくる
        dependsOn copyWebUiResources
    }

    task copyDomaResources(type: Sync)  {
        from sourceSets.main.resources.srcDirs
        into compileJava.destinationDir
        include 'doma.compile.config'
        include 'META-INF/**/*.sql'
        include 'META-INF/**/*.script'
    }

    compileJava {
        dependsOn copyDomaResources
        options.compilerArgs = ['-Adoma.domain.converters=net.orekyuu.shop.web.infrastructure.doma.DomainConvertersProvider']
    }
}
